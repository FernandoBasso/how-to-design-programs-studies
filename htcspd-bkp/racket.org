#+TITLE: Racket

* Some Links

https://jeremykun.com/2011/10/02/a-taste-of-racket/
http://docs.racket-lang.org/htdp/

* Basic

1. Add the repos to .emacs or init.el as described in
   https://melpa.org/#/getting-started.
2. Run `M-x RET package-refresh-contents RET` (they don't mention it
   in the tutorial).
3. Run `M-x RET package-install geiser RET`.

Geiser info pages:

    C-h i m Geiser RET

Chicken stuff (read more here): http://www.nongnu.org/geiser/geiser_2.html#Installation

    M-x run-geiser

http://www.crockford.com/javascript/little.html
https://github.com/pkrumins/the-little-schemer


Open a `.rkt` file in Emacs. Whether you have Geiser repl running or not,
hit `C-c C-a` and all functions and other definitions inside the `.rkt`
file will be available for use in the Geiser repl.

In geiser REPL you can do

    (enter! "foo.rkt")
    (enter! "projs/main.rkt")

to load code on those files into the REPL. It seems the files must
start with `#lang racket` or some thing like that.  Or, if you are
editing a .rkt file and want to "enter" it into the repl:

    C-c C-a

http://www.nongnu.org/geiser/geiser_5.html


https://docs.racket-lang.org/reference/interactive.html


* htdp/bsl

#lang htdp/bsl

[[https://github.com/greghendershott/racket-mode/issues/125][Topic about images in htdp/bsl that shows some useful things.]] May come in handy at some point.


To run tests like those with ~check-expect~, your ~.rkt~ file must start with:

: #lang htdp/bsl

or

: #reader(lib "htdp-beginner-reader.ss" "lang")((modname area-tests) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))

But not both.

Then, from ~racket-mode~, do ~C-c C-t~ (~racket-test~) and be happy. From the command line,

: raco test file.rkt


Thanks to @lexi-lambda in #racket. He refused to change his nick to lexi-Î» as I suggested, though.




** IRC Talk about predicate
#+NAME: irc-#clnoobs
#+BEGIN_SRC 
 Fernando-Basso | My Anki card says "a function or operator that returns a boolean value". Is
                | that an acceptable answer?
       isBEKaml | Fernando-Basso: predicate means something that asserts a condition. For
                | example, a predicate function is something that always returns true or false
                | depending on its parameters
      edgar-rft | Fernando-Basso: a function that answers with NIL (false) or non-NIL (true),
                | where non-NIL means any value that's not NIL.
 Fernando-Basso | Al right. Thank you both.
 Fernando-Basso | And with that questions I think I have fully proved my clnoobness.
      edgar-rft | In principle "predicate" means that the return-value should be interpreted as a
                | boolean.
 Fernando-Basso | Yes, where nil is false and everything else is truthy, right?
       isBEKaml | right
 Fernando-Basso | Even "" or 0 are truthy.
#+END_SRC


https://docs.racket-lang.org/guide/intro.html provides a nice introduction and how to run Racket (.rkt) files. Also check https://docs.racket-lang.org/guide/scripts.html.






